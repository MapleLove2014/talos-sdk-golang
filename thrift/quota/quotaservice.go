// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package quota

import (
	"bytes"
	"fmt"

	"github.com/MapleLove2014/talos-sdk-golang/thrift/common"
	"github.com/MapleLove2014/talos-sdk-golang/thrift/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__

type QuotaService interface {
	common.TalosBaseService

	// setQuota, the caller must be talos admin;
	// Note: the developer can not create topic until Talos admin setUserQuota
	//
	//
	// Parameters:
	//  - Request
	SetUserQuota(request *SetUserQuotaRequest) (err error)
	// listQuota, the caller must be talos admin;
	//
	ListUserQuota() (r *ListUserQuotaResponse, err error)
	// queryQuota, this will return the quota with the caller;
	// the caller not need to be talos admin
	//
	QueryUserQuota() (r *QueryUserQuotaResponse, err error)
	// deleteQuota, the caller must be talos admin;
	//
	//
	// Parameters:
	//  - Request
	DeleteUserQuota(request *DeleteUserQuotaRequest) (err error)
	// Parameters:
	//  - Request
	ApplyQuota(request *ApplyQuotaRequest) (err error)
	// Parameters:
	//  - Request
	AutoApplyQuota(request *AutoApplyQuotaRequest) (err error)
	ListQuota() (r *ListQuotaResponse, err error)
	ListPendingQuota() (r *ListPendingQuotaResponse, err error)
	// Parameters:
	//  - Request
	ApproveQuota(request *ApproveQuotaRequest) (r *ApproveQuotaResponse, err error)
	// Parameters:
	//  - Request
	RevokeQuota(request *RevokeQuotaRequest) (r *RevokeQuotaResponse, err error)
}

type QuotaServiceClient struct {
	*common.TalosBaseServiceClient
}

func NewQuotaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *QuotaServiceClient {
	return &QuotaServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientFactory(t, f)}
}

func NewQuotaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *QuotaServiceClient {
	return &QuotaServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientProtocol(t, iprot, oprot)}
}

// setQuota, the caller must be talos admin;
// Note: the developer can not create topic until Talos admin setUserQuota
//
//
// Parameters:
//  - Request
func (p *QuotaServiceClient) SetUserQuota(request *SetUserQuotaRequest) (err error) {
	if err = p.sendSetUserQuota(request); err != nil {
		return
	}
	return p.recvSetUserQuota()
}

func (p *QuotaServiceClient) sendSetUserQuota(request *SetUserQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setUserQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SetUserQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvSetUserQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setUserQuota failed: out of sequence response")
		return
	}
	result := SetUserQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// listQuota, the caller must be talos admin;
//
func (p *QuotaServiceClient) ListUserQuota() (r *ListUserQuotaResponse, err error) {
	if err = p.sendListUserQuota(); err != nil {
		return
	}
	return p.recvListUserQuota()
}

func (p *QuotaServiceClient) sendListUserQuota() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listUserQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListUserQuotaArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvListUserQuota() (value *ListUserQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listUserQuota failed: out of sequence response")
		return
	}
	result := ListUserQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// queryQuota, this will return the quota with the caller;
// the caller not need to be talos admin
//
func (p *QuotaServiceClient) QueryUserQuota() (r *QueryUserQuotaResponse, err error) {
	if err = p.sendQueryUserQuota(); err != nil {
		return
	}
	return p.recvQueryUserQuota()
}

func (p *QuotaServiceClient) sendQueryUserQuota() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryUserQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := QueryUserQuotaArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvQueryUserQuota() (value *QueryUserQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryUserQuota failed: out of sequence response")
		return
	}
	result := QueryUserQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// deleteQuota, the caller must be talos admin;
//
//
// Parameters:
//  - Request
func (p *QuotaServiceClient) DeleteUserQuota(request *DeleteUserQuotaRequest) (err error) {
	if err = p.sendDeleteUserQuota(request); err != nil {
		return
	}
	return p.recvDeleteUserQuota()
}

func (p *QuotaServiceClient) sendDeleteUserQuota(request *DeleteUserQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteUserQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteUserQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvDeleteUserQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteUserQuota failed: out of sequence response")
		return
	}
	result := DeleteUserQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Request
func (p *QuotaServiceClient) ApplyQuota(request *ApplyQuotaRequest) (err error) {
	if err = p.sendApplyQuota(request); err != nil {
		return
	}
	return p.recvApplyQuota()
}

func (p *QuotaServiceClient) sendApplyQuota(request *ApplyQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("applyQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ApplyQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvApplyQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "applyQuota failed: out of sequence response")
		return
	}
	result := ApplyQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Request
func (p *QuotaServiceClient) AutoApplyQuota(request *AutoApplyQuotaRequest) (err error) {
	if err = p.sendAutoApplyQuota(request); err != nil {
		return
	}
	return p.recvAutoApplyQuota()
}

func (p *QuotaServiceClient) sendAutoApplyQuota(request *AutoApplyQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("autoApplyQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AutoApplyQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvAutoApplyQuota() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "autoApplyQuota failed: out of sequence response")
		return
	}
	result := AutoApplyQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

func (p *QuotaServiceClient) ListQuota() (r *ListQuotaResponse, err error) {
	if err = p.sendListQuota(); err != nil {
		return
	}
	return p.recvListQuota()
}

func (p *QuotaServiceClient) sendListQuota() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListQuotaArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvListQuota() (value *ListQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listQuota failed: out of sequence response")
		return
	}
	result := ListQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

func (p *QuotaServiceClient) ListPendingQuota() (r *ListPendingQuotaResponse, err error) {
	if err = p.sendListPendingQuota(); err != nil {
		return
	}
	return p.recvListPendingQuota()
}

func (p *QuotaServiceClient) sendListPendingQuota() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listPendingQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListPendingQuotaArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvListPendingQuota() (value *ListPendingQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listPendingQuota failed: out of sequence response")
		return
	}
	result := ListPendingQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *QuotaServiceClient) ApproveQuota(request *ApproveQuotaRequest) (r *ApproveQuotaResponse, err error) {
	if err = p.sendApproveQuota(request); err != nil {
		return
	}
	return p.recvApproveQuota()
}

func (p *QuotaServiceClient) sendApproveQuota(request *ApproveQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("approveQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ApproveQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvApproveQuota() (value *ApproveQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "approveQuota failed: out of sequence response")
		return
	}
	result := ApproveQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *QuotaServiceClient) RevokeQuota(request *RevokeQuotaRequest) (r *RevokeQuotaResponse, err error) {
	if err = p.sendRevokeQuota(request); err != nil {
		return
	}
	return p.recvRevokeQuota()
}

func (p *QuotaServiceClient) sendRevokeQuota(request *RevokeQuotaRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revokeQuota", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokeQuotaArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *QuotaServiceClient) recvRevokeQuota() (value *RevokeQuotaResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokeQuota failed: out of sequence response")
		return
	}
	result := RevokeQuotaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type QuotaServiceProcessor struct {
	*common.TalosBaseServiceProcessor
}

func NewQuotaServiceProcessor(handler QuotaService) *QuotaServiceProcessor {
	self26 := &QuotaServiceProcessor{common.NewTalosBaseServiceProcessor(handler)}
	self26.AddToProcessorMap("setUserQuota", &quotaServiceProcessorSetUserQuota{handler: handler})
	self26.AddToProcessorMap("listUserQuota", &quotaServiceProcessorListUserQuota{handler: handler})
	self26.AddToProcessorMap("queryUserQuota", &quotaServiceProcessorQueryUserQuota{handler: handler})
	self26.AddToProcessorMap("deleteUserQuota", &quotaServiceProcessorDeleteUserQuota{handler: handler})
	self26.AddToProcessorMap("applyQuota", &quotaServiceProcessorApplyQuota{handler: handler})
	self26.AddToProcessorMap("autoApplyQuota", &quotaServiceProcessorAutoApplyQuota{handler: handler})
	self26.AddToProcessorMap("listQuota", &quotaServiceProcessorListQuota{handler: handler})
	self26.AddToProcessorMap("listPendingQuota", &quotaServiceProcessorListPendingQuota{handler: handler})
	self26.AddToProcessorMap("approveQuota", &quotaServiceProcessorApproveQuota{handler: handler})
	self26.AddToProcessorMap("revokeQuota", &quotaServiceProcessorRevokeQuota{handler: handler})
	return self26
}

type quotaServiceProcessorSetUserQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorSetUserQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SetUserQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setUserQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SetUserQuotaResult{}
	var err2 error
	if err2 = p.handler.SetUserQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setUserQuota: "+err2.Error())
			oprot.WriteMessageBegin("setUserQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setUserQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorListUserQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorListUserQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListUserQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listUserQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListUserQuotaResult{}
	var retval *ListUserQuotaResponse
	var err2 error
	if retval, err2 = p.handler.ListUserQuota(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUserQuota: "+err2.Error())
			oprot.WriteMessageBegin("listUserQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listUserQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorQueryUserQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorQueryUserQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := QueryUserQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryUserQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := QueryUserQuotaResult{}
	var retval *QueryUserQuotaResponse
	var err2 error
	if retval, err2 = p.handler.QueryUserQuota(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryUserQuota: "+err2.Error())
			oprot.WriteMessageBegin("queryUserQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryUserQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorDeleteUserQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorDeleteUserQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteUserQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteUserQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteUserQuotaResult{}
	var err2 error
	if err2 = p.handler.DeleteUserQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUserQuota: "+err2.Error())
			oprot.WriteMessageBegin("deleteUserQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteUserQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorApplyQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorApplyQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApplyQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("applyQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ApplyQuotaResult{}
	var err2 error
	if err2 = p.handler.ApplyQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing applyQuota: "+err2.Error())
			oprot.WriteMessageBegin("applyQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("applyQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorAutoApplyQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorAutoApplyQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AutoApplyQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("autoApplyQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AutoApplyQuotaResult{}
	var err2 error
	if err2 = p.handler.AutoApplyQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing autoApplyQuota: "+err2.Error())
			oprot.WriteMessageBegin("autoApplyQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("autoApplyQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorListQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorListQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListQuotaResult{}
	var retval *ListQuotaResponse
	var err2 error
	if retval, err2 = p.handler.ListQuota(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listQuota: "+err2.Error())
			oprot.WriteMessageBegin("listQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorListPendingQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorListPendingQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListPendingQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listPendingQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListPendingQuotaResult{}
	var retval *ListPendingQuotaResponse
	var err2 error
	if retval, err2 = p.handler.ListPendingQuota(); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listPendingQuota: "+err2.Error())
			oprot.WriteMessageBegin("listPendingQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listPendingQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorApproveQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorApproveQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ApproveQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("approveQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ApproveQuotaResult{}
	var retval *ApproveQuotaResponse
	var err2 error
	if retval, err2 = p.handler.ApproveQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing approveQuota: "+err2.Error())
			oprot.WriteMessageBegin("approveQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("approveQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type quotaServiceProcessorRevokeQuota struct {
	handler QuotaService
}

func (p *quotaServiceProcessorRevokeQuota) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokeQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revokeQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokeQuotaResult{}
	var retval *RevokeQuotaResponse
	var err2 error
	if retval, err2 = p.handler.RevokeQuota(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeQuota: "+err2.Error())
			oprot.WriteMessageBegin("revokeQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("revokeQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SetUserQuotaArgs struct {
	Request *SetUserQuotaRequest `thrift:"request,1" json:"request"`
}

func NewSetUserQuotaArgs() *SetUserQuotaArgs {
	return &SetUserQuotaArgs{}
}

var SetUserQuotaArgs_Request_DEFAULT *SetUserQuotaRequest

func (p *SetUserQuotaArgs) GetRequest() *SetUserQuotaRequest {
	if !p.IsSetRequest() {
		return SetUserQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SetUserQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SetUserQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SetUserQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *SetUserQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setUserQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *SetUserQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserQuotaArgs(%+v)", *p)
}

type SetUserQuotaResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewSetUserQuotaResult() *SetUserQuotaResult {
	return &SetUserQuotaResult{}
}

var SetUserQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *SetUserQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return SetUserQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *SetUserQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *SetUserQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *SetUserQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setUserQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *SetUserQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserQuotaResult(%+v)", *p)
}

type ListUserQuotaArgs struct {
}

func NewListUserQuotaArgs() *ListUserQuotaArgs {
	return &ListUserQuotaArgs{}
}

func (p *ListUserQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListUserQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listUserQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListUserQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListUserQuotaArgs(%+v)", *p)
}

type ListUserQuotaResult struct {
	Success *ListUserQuotaResponse       `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListUserQuotaResult() *ListUserQuotaResult {
	return &ListUserQuotaResult{}
}

var ListUserQuotaResult_Success_DEFAULT *ListUserQuotaResponse

func (p *ListUserQuotaResult) GetSuccess() *ListUserQuotaResponse {
	if !p.IsSetSuccess() {
		return ListUserQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var ListUserQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListUserQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListUserQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *ListUserQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListUserQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListUserQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListUserQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListUserQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListUserQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListUserQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listUserQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListUserQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListUserQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListUserQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListUserQuotaResult(%+v)", *p)
}

type QueryUserQuotaArgs struct {
}

func NewQueryUserQuotaArgs() *QueryUserQuotaArgs {
	return &QueryUserQuotaArgs{}
}

func (p *QueryUserQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserQuotaArgs(%+v)", *p)
}

type QueryUserQuotaResult struct {
	Success *QueryUserQuotaResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewQueryUserQuotaResult() *QueryUserQuotaResult {
	return &QueryUserQuotaResult{}
}

var QueryUserQuotaResult_Success_DEFAULT *QueryUserQuotaResponse

func (p *QueryUserQuotaResult) GetSuccess() *QueryUserQuotaResponse {
	if !p.IsSetSuccess() {
		return QueryUserQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var QueryUserQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *QueryUserQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return QueryUserQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *QueryUserQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryUserQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *QueryUserQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryUserQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *QueryUserQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *QueryUserQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryUserQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *QueryUserQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserQuotaResult(%+v)", *p)
}

type DeleteUserQuotaArgs struct {
	Request *DeleteUserQuotaRequest `thrift:"request,1" json:"request"`
}

func NewDeleteUserQuotaArgs() *DeleteUserQuotaArgs {
	return &DeleteUserQuotaArgs{}
}

var DeleteUserQuotaArgs_Request_DEFAULT *DeleteUserQuotaRequest

func (p *DeleteUserQuotaArgs) GetRequest() *DeleteUserQuotaRequest {
	if !p.IsSetRequest() {
		return DeleteUserQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeleteUserQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeleteUserQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteUserQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &DeleteUserQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeleteUserQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteUserQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteUserQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeleteUserQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserQuotaArgs(%+v)", *p)
}

type DeleteUserQuotaResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewDeleteUserQuotaResult() *DeleteUserQuotaResult {
	return &DeleteUserQuotaResult{}
}

var DeleteUserQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *DeleteUserQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return DeleteUserQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *DeleteUserQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeleteUserQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteUserQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeleteUserQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteUserQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteUserQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeleteUserQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserQuotaResult(%+v)", *p)
}

type ApplyQuotaArgs struct {
	Request *ApplyQuotaRequest `thrift:"request,1" json:"request"`
}

func NewApplyQuotaArgs() *ApplyQuotaArgs {
	return &ApplyQuotaArgs{}
}

var ApplyQuotaArgs_Request_DEFAULT *ApplyQuotaRequest

func (p *ApplyQuotaArgs) GetRequest() *ApplyQuotaRequest {
	if !p.IsSetRequest() {
		return ApplyQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ApplyQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApplyQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApplyQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ApplyQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ApplyQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("applyQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApplyQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ApplyQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApplyQuotaArgs(%+v)", *p)
}

type ApplyQuotaResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewApplyQuotaResult() *ApplyQuotaResult {
	return &ApplyQuotaResult{}
}

var ApplyQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *ApplyQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ApplyQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *ApplyQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *ApplyQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApplyQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ApplyQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("applyQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApplyQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ApplyQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApplyQuotaResult(%+v)", *p)
}

type AutoApplyQuotaArgs struct {
	Request *AutoApplyQuotaRequest `thrift:"request,1" json:"request"`
}

func NewAutoApplyQuotaArgs() *AutoApplyQuotaArgs {
	return &AutoApplyQuotaArgs{}
}

var AutoApplyQuotaArgs_Request_DEFAULT *AutoApplyQuotaRequest

func (p *AutoApplyQuotaArgs) GetRequest() *AutoApplyQuotaRequest {
	if !p.IsSetRequest() {
		return AutoApplyQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AutoApplyQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AutoApplyQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AutoApplyQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &AutoApplyQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *AutoApplyQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("autoApplyQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AutoApplyQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *AutoApplyQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoApplyQuotaArgs(%+v)", *p)
}

type AutoApplyQuotaResult struct {
	E *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewAutoApplyQuotaResult() *AutoApplyQuotaResult {
	return &AutoApplyQuotaResult{}
}

var AutoApplyQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *AutoApplyQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return AutoApplyQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *AutoApplyQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *AutoApplyQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AutoApplyQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *AutoApplyQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("autoApplyQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AutoApplyQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *AutoApplyQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoApplyQuotaResult(%+v)", *p)
}

type ListQuotaArgs struct {
}

func NewListQuotaArgs() *ListQuotaArgs {
	return &ListQuotaArgs{}
}

func (p *ListQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQuotaArgs(%+v)", *p)
}

type ListQuotaResult struct {
	Success *ListQuotaResponse           `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListQuotaResult() *ListQuotaResult {
	return &ListQuotaResult{}
}

var ListQuotaResult_Success_DEFAULT *ListQuotaResponse

func (p *ListQuotaResult) GetSuccess() *ListQuotaResponse {
	if !p.IsSetSuccess() {
		return ListQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var ListQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *ListQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQuotaResult(%+v)", *p)
}

type ListPendingQuotaArgs struct {
}

func NewListPendingQuotaArgs() *ListPendingQuotaArgs {
	return &ListPendingQuotaArgs{}
}

func (p *ListPendingQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPendingQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listPendingQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPendingQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPendingQuotaArgs(%+v)", *p)
}

type ListPendingQuotaResult struct {
	Success *ListPendingQuotaResponse    `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewListPendingQuotaResult() *ListPendingQuotaResult {
	return &ListPendingQuotaResult{}
}

var ListPendingQuotaResult_Success_DEFAULT *ListPendingQuotaResponse

func (p *ListPendingQuotaResult) GetSuccess() *ListPendingQuotaResponse {
	if !p.IsSetSuccess() {
		return ListPendingQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var ListPendingQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *ListPendingQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ListPendingQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *ListPendingQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPendingQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *ListPendingQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPendingQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ListPendingQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ListPendingQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ListPendingQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listPendingQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPendingQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListPendingQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ListPendingQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPendingQuotaResult(%+v)", *p)
}

type ApproveQuotaArgs struct {
	Request *ApproveQuotaRequest `thrift:"request,1" json:"request"`
}

func NewApproveQuotaArgs() *ApproveQuotaArgs {
	return &ApproveQuotaArgs{}
}

var ApproveQuotaArgs_Request_DEFAULT *ApproveQuotaRequest

func (p *ApproveQuotaArgs) GetRequest() *ApproveQuotaRequest {
	if !p.IsSetRequest() {
		return ApproveQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ApproveQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ApproveQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApproveQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ApproveQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *ApproveQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("approveQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApproveQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *ApproveQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApproveQuotaArgs(%+v)", *p)
}

type ApproveQuotaResult struct {
	Success *ApproveQuotaResponse        `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewApproveQuotaResult() *ApproveQuotaResult {
	return &ApproveQuotaResult{}
}

var ApproveQuotaResult_Success_DEFAULT *ApproveQuotaResponse

func (p *ApproveQuotaResult) GetSuccess() *ApproveQuotaResponse {
	if !p.IsSetSuccess() {
		return ApproveQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var ApproveQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *ApproveQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return ApproveQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *ApproveQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ApproveQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *ApproveQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApproveQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ApproveQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *ApproveQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ApproveQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("approveQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApproveQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ApproveQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ApproveQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApproveQuotaResult(%+v)", *p)
}

type RevokeQuotaArgs struct {
	Request *RevokeQuotaRequest `thrift:"request,1" json:"request"`
}

func NewRevokeQuotaArgs() *RevokeQuotaArgs {
	return &RevokeQuotaArgs{}
}

var RevokeQuotaArgs_Request_DEFAULT *RevokeQuotaRequest

func (p *RevokeQuotaArgs) GetRequest() *RevokeQuotaRequest {
	if !p.IsSetRequest() {
		return RevokeQuotaArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RevokeQuotaArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RevokeQuotaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &RevokeQuotaRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *RevokeQuotaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeQuota_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *RevokeQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeQuotaArgs(%+v)", *p)
}

type RevokeQuotaResult struct {
	Success *RevokeQuotaResponse         `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewRevokeQuotaResult() *RevokeQuotaResult {
	return &RevokeQuotaResult{}
}

var RevokeQuotaResult_Success_DEFAULT *RevokeQuotaResponse

func (p *RevokeQuotaResult) GetSuccess() *RevokeQuotaResponse {
	if !p.IsSetSuccess() {
		return RevokeQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var RevokeQuotaResult_E_DEFAULT *common.GalaxyTalosException

func (p *RevokeQuotaResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return RevokeQuotaResult_E_DEFAULT
	}
	return p.E
}
func (p *RevokeQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RevokeQuotaResult) IsSetE() bool {
	return p.E != nil
}

func (p *RevokeQuotaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RevokeQuotaResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RevokeQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RevokeQuotaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeQuota_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RevokeQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RevokeQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeQuotaResult(%+v)", *p)
}
