// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package quota

import (
	"bytes"
	"fmt"

	"github.com/MapleLove2014/talos-sdk-golang/thrift/common"
	"github.com/MapleLove2014/talos-sdk-golang/thrift/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var GoUnusedProtection__ int

type BaseQuota struct {
	SpaceQuota              int64  `thrift:"spaceQuota,1,required" json:"spaceQuota"`
	UsedSpace               *int64 `thrift:"usedSpace,2" json:"usedSpace"`
	RemainingSpace          *int64 `thrift:"remainingSpace,3" json:"remainingSpace"`
	PutMessageQpsQuota      *int32 `thrift:"putMessageQpsQuota,4" json:"putMessageQpsQuota"`
	GetMessageQpsQuota      *int32 `thrift:"getMessageQpsQuota,5" json:"getMessageQpsQuota"`
	PutMessageBytesQpsQuota *int64 `thrift:"putMessageBytesQpsQuota,6" json:"putMessageBytesQpsQuota"`
	GetMessageBytesQpsQuota *int64 `thrift:"getMessageBytesQpsQuota,7" json:"getMessageBytesQpsQuota"`
}

func NewBaseQuota() *BaseQuota {
	return &BaseQuota{}
}

func (p *BaseQuota) GetSpaceQuota() int64 {
	return p.SpaceQuota
}

var BaseQuota_UsedSpace_DEFAULT int64

func (p *BaseQuota) GetUsedSpace() int64 {
	if !p.IsSetUsedSpace() {
		return BaseQuota_UsedSpace_DEFAULT
	}
	return *p.UsedSpace
}

var BaseQuota_RemainingSpace_DEFAULT int64

func (p *BaseQuota) GetRemainingSpace() int64 {
	if !p.IsSetRemainingSpace() {
		return BaseQuota_RemainingSpace_DEFAULT
	}
	return *p.RemainingSpace
}

var BaseQuota_PutMessageQpsQuota_DEFAULT int32

func (p *BaseQuota) GetPutMessageQpsQuota() int32 {
	if !p.IsSetPutMessageQpsQuota() {
		return BaseQuota_PutMessageQpsQuota_DEFAULT
	}
	return *p.PutMessageQpsQuota
}

var BaseQuota_GetMessageQpsQuota_DEFAULT int32

func (p *BaseQuota) GetGetMessageQpsQuota() int32 {
	if !p.IsSetGetMessageQpsQuota() {
		return BaseQuota_GetMessageQpsQuota_DEFAULT
	}
	return *p.GetMessageQpsQuota
}

var BaseQuota_PutMessageBytesQpsQuota_DEFAULT int64

func (p *BaseQuota) GetPutMessageBytesQpsQuota() int64 {
	if !p.IsSetPutMessageBytesQpsQuota() {
		return BaseQuota_PutMessageBytesQpsQuota_DEFAULT
	}
	return *p.PutMessageBytesQpsQuota
}

var BaseQuota_GetMessageBytesQpsQuota_DEFAULT int64

func (p *BaseQuota) GetGetMessageBytesQpsQuota() int64 {
	if !p.IsSetGetMessageBytesQpsQuota() {
		return BaseQuota_GetMessageBytesQpsQuota_DEFAULT
	}
	return *p.GetMessageBytesQpsQuota
}
func (p *BaseQuota) IsSetUsedSpace() bool {
	return p.UsedSpace != nil
}

func (p *BaseQuota) IsSetRemainingSpace() bool {
	return p.RemainingSpace != nil
}

func (p *BaseQuota) IsSetPutMessageQpsQuota() bool {
	return p.PutMessageQpsQuota != nil
}

func (p *BaseQuota) IsSetGetMessageQpsQuota() bool {
	return p.GetMessageQpsQuota != nil
}

func (p *BaseQuota) IsSetPutMessageBytesQpsQuota() bool {
	return p.PutMessageBytesQpsQuota != nil
}

func (p *BaseQuota) IsSetGetMessageBytesQpsQuota() bool {
	return p.GetMessageBytesQpsQuota != nil
}

func (p *BaseQuota) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BaseQuota) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SpaceQuota = v
	}
	return nil
}

func (p *BaseQuota) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UsedSpace = &v
	}
	return nil
}

func (p *BaseQuota) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.RemainingSpace = &v
	}
	return nil
}

func (p *BaseQuota) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.PutMessageQpsQuota = &v
	}
	return nil
}

func (p *BaseQuota) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GetMessageQpsQuota = &v
	}
	return nil
}

func (p *BaseQuota) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.PutMessageBytesQpsQuota = &v
	}
	return nil
}

func (p *BaseQuota) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.GetMessageBytesQpsQuota = &v
	}
	return nil
}

func (p *BaseQuota) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BaseQuota"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BaseQuota) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spaceQuota", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:spaceQuota: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SpaceQuota)); err != nil {
		return fmt.Errorf("%T.spaceQuota (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:spaceQuota: %s", p, err)
	}
	return err
}

func (p *BaseQuota) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsedSpace() {
		if err := oprot.WriteFieldBegin("usedSpace", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:usedSpace: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.UsedSpace)); err != nil {
			return fmt.Errorf("%T.usedSpace (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:usedSpace: %s", p, err)
		}
	}
	return err
}

func (p *BaseQuota) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainingSpace() {
		if err := oprot.WriteFieldBegin("remainingSpace", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:remainingSpace: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.RemainingSpace)); err != nil {
			return fmt.Errorf("%T.remainingSpace (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:remainingSpace: %s", p, err)
		}
	}
	return err
}

func (p *BaseQuota) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPutMessageQpsQuota() {
		if err := oprot.WriteFieldBegin("putMessageQpsQuota", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:putMessageQpsQuota: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.PutMessageQpsQuota)); err != nil {
			return fmt.Errorf("%T.putMessageQpsQuota (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:putMessageQpsQuota: %s", p, err)
		}
	}
	return err
}

func (p *BaseQuota) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetMessageQpsQuota() {
		if err := oprot.WriteFieldBegin("getMessageQpsQuota", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:getMessageQpsQuota: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.GetMessageQpsQuota)); err != nil {
			return fmt.Errorf("%T.getMessageQpsQuota (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:getMessageQpsQuota: %s", p, err)
		}
	}
	return err
}

func (p *BaseQuota) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPutMessageBytesQpsQuota() {
		if err := oprot.WriteFieldBegin("putMessageBytesQpsQuota", thrift.I64, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:putMessageBytesQpsQuota: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.PutMessageBytesQpsQuota)); err != nil {
			return fmt.Errorf("%T.putMessageBytesQpsQuota (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:putMessageBytesQpsQuota: %s", p, err)
		}
	}
	return err
}

func (p *BaseQuota) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetMessageBytesQpsQuota() {
		if err := oprot.WriteFieldBegin("getMessageBytesQpsQuota", thrift.I64, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:getMessageBytesQpsQuota: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.GetMessageBytesQpsQuota)); err != nil {
			return fmt.Errorf("%T.getMessageBytesQpsQuota (7) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:getMessageBytesQpsQuota: %s", p, err)
		}
	}
	return err
}

func (p *BaseQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseQuota(%+v)", *p)
}

type UserQuota struct {
	BaseQuota        *BaseQuota `thrift:"baseQuota,1,required" json:"baseQuota"`
	TopicNumberQuota *int32     `thrift:"topicNumberQuota,2" json:"topicNumberQuota"`
}

func NewUserQuota() *UserQuota {
	return &UserQuota{}
}

var UserQuota_BaseQuota_DEFAULT *BaseQuota

func (p *UserQuota) GetBaseQuota() *BaseQuota {
	if !p.IsSetBaseQuota() {
		return UserQuota_BaseQuota_DEFAULT
	}
	return p.BaseQuota
}

var UserQuota_TopicNumberQuota_DEFAULT int32

func (p *UserQuota) GetTopicNumberQuota() int32 {
	if !p.IsSetTopicNumberQuota() {
		return UserQuota_TopicNumberQuota_DEFAULT
	}
	return *p.TopicNumberQuota
}
func (p *UserQuota) IsSetBaseQuota() bool {
	return p.BaseQuota != nil
}

func (p *UserQuota) IsSetTopicNumberQuota() bool {
	return p.TopicNumberQuota != nil
}

func (p *UserQuota) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserQuota) ReadField1(iprot thrift.TProtocol) error {
	p.BaseQuota = &BaseQuota{}
	if err := p.BaseQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseQuota, err)
	}
	return nil
}

func (p *UserQuota) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TopicNumberQuota = &v
	}
	return nil
}

func (p *UserQuota) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserQuota"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UserQuota) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("baseQuota", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:baseQuota: %s", p, err)
	}
	if err := p.BaseQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:baseQuota: %s", p, err)
	}
	return err
}

func (p *UserQuota) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopicNumberQuota() {
		if err := oprot.WriteFieldBegin("topicNumberQuota", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:topicNumberQuota: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.TopicNumberQuota)); err != nil {
			return fmt.Errorf("%T.topicNumberQuota (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:topicNumberQuota: %s", p, err)
		}
	}
	return err
}

func (p *UserQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQuota(%+v)", *p)
}

type SetUserQuotaRequest struct {
	DeveloperId string     `thrift:"developerId,1,required" json:"developerId"`
	UserQuota   *UserQuota `thrift:"userQuota,2,required" json:"userQuota"`
}

func NewSetUserQuotaRequest() *SetUserQuotaRequest {
	return &SetUserQuotaRequest{}
}

func (p *SetUserQuotaRequest) GetDeveloperId() string {
	return p.DeveloperId
}

var SetUserQuotaRequest_UserQuota_DEFAULT *UserQuota

func (p *SetUserQuotaRequest) GetUserQuota() *UserQuota {
	if !p.IsSetUserQuota() {
		return SetUserQuotaRequest_UserQuota_DEFAULT
	}
	return p.UserQuota
}
func (p *SetUserQuotaRequest) IsSetUserQuota() bool {
	return p.UserQuota != nil
}

func (p *SetUserQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SetUserQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *SetUserQuotaRequest) ReadField2(iprot thrift.TProtocol) error {
	p.UserQuota = &UserQuota{}
	if err := p.UserQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserQuota, err)
	}
	return nil
}

func (p *SetUserQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetUserQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SetUserQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
	}
	return err
}

func (p *SetUserQuotaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userQuota", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:userQuota: %s", p, err)
	}
	if err := p.UserQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UserQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:userQuota: %s", p, err)
	}
	return err
}

func (p *SetUserQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetUserQuotaRequest(%+v)", *p)
}

type QueryUserQuotaResponse struct {
	UserQuota *UserQuota `thrift:"userQuota,1,required" json:"userQuota"`
}

func NewQueryUserQuotaResponse() *QueryUserQuotaResponse {
	return &QueryUserQuotaResponse{}
}

var QueryUserQuotaResponse_UserQuota_DEFAULT *UserQuota

func (p *QueryUserQuotaResponse) GetUserQuota() *UserQuota {
	if !p.IsSetUserQuota() {
		return QueryUserQuotaResponse_UserQuota_DEFAULT
	}
	return p.UserQuota
}
func (p *QueryUserQuotaResponse) IsSetUserQuota() bool {
	return p.UserQuota != nil
}

func (p *QueryUserQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryUserQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	p.UserQuota = &UserQuota{}
	if err := p.UserQuota.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.UserQuota, err)
	}
	return nil
}

func (p *QueryUserQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryUserQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryUserQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userQuota", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userQuota: %s", p, err)
	}
	if err := p.UserQuota.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.UserQuota, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userQuota: %s", p, err)
	}
	return err
}

func (p *QueryUserQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryUserQuotaResponse(%+v)", *p)
}

type ListUserQuotaResponse struct {
	UserQuotaList map[string]*UserQuota `thrift:"userQuotaList,1,required" json:"userQuotaList"`
}

func NewListUserQuotaResponse() *ListUserQuotaResponse {
	return &ListUserQuotaResponse{}
}

func (p *ListUserQuotaResponse) GetUserQuotaList() map[string]*UserQuota {
	return p.UserQuotaList
}
func (p *ListUserQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListUserQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*UserQuota, size)
	p.UserQuotaList = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		_val1 := &UserQuota{}
		if err := _val1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val1, err)
		}
		p.UserQuotaList[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ListUserQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListUserQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListUserQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userQuotaList", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userQuotaList: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.UserQuotaList)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.UserQuotaList {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userQuotaList: %s", p, err)
	}
	return err
}

func (p *ListUserQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListUserQuotaResponse(%+v)", *p)
}

type DeleteUserQuotaRequest struct {
	DeveloperId string `thrift:"developerId,1,required" json:"developerId"`
}

func NewDeleteUserQuotaRequest() *DeleteUserQuotaRequest {
	return &DeleteUserQuotaRequest{}
}

func (p *DeleteUserQuotaRequest) GetDeveloperId() string {
	return p.DeveloperId
}
func (p *DeleteUserQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteUserQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DeveloperId = v
	}
	return nil
}

func (p *DeleteUserQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteUserQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteUserQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("developerId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:developerId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DeveloperId)); err != nil {
		return fmt.Errorf("%T.developerId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:developerId: %s", p, err)
	}
	return err
}

func (p *DeleteUserQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserQuotaRequest(%+v)", *p)
}

type PartitionQuotaInfo struct {
	OrgId       string  `thrift:"orgId,1,required" json:"orgId"`
	TotalQuota  int32   `thrift:"totalQuota,2,required" json:"totalQuota"`
	UsedOuota   *int32  `thrift:"usedOuota,3" json:"usedOuota"`
	ApplyReason *string `thrift:"applyReason,4" json:"applyReason"`
	OrgName     *string `thrift:"orgName,5" json:"orgName"`
}

func NewPartitionQuotaInfo() *PartitionQuotaInfo {
	return &PartitionQuotaInfo{}
}

func (p *PartitionQuotaInfo) GetOrgId() string {
	return p.OrgId
}

func (p *PartitionQuotaInfo) GetTotalQuota() int32 {
	return p.TotalQuota
}

var PartitionQuotaInfo_UsedOuota_DEFAULT int32

func (p *PartitionQuotaInfo) GetUsedOuota() int32 {
	if !p.IsSetUsedOuota() {
		return PartitionQuotaInfo_UsedOuota_DEFAULT
	}
	return *p.UsedOuota
}

var PartitionQuotaInfo_ApplyReason_DEFAULT string

func (p *PartitionQuotaInfo) GetApplyReason() string {
	if !p.IsSetApplyReason() {
		return PartitionQuotaInfo_ApplyReason_DEFAULT
	}
	return *p.ApplyReason
}

var PartitionQuotaInfo_OrgName_DEFAULT string

func (p *PartitionQuotaInfo) GetOrgName() string {
	if !p.IsSetOrgName() {
		return PartitionQuotaInfo_OrgName_DEFAULT
	}
	return *p.OrgName
}
func (p *PartitionQuotaInfo) IsSetUsedOuota() bool {
	return p.UsedOuota != nil
}

func (p *PartitionQuotaInfo) IsSetApplyReason() bool {
	return p.ApplyReason != nil
}

func (p *PartitionQuotaInfo) IsSetOrgName() bool {
	return p.OrgName != nil
}

func (p *PartitionQuotaInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionQuotaInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.OrgId = v
	}
	return nil
}

func (p *PartitionQuotaInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TotalQuota = v
	}
	return nil
}

func (p *PartitionQuotaInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.UsedOuota = &v
	}
	return nil
}

func (p *PartitionQuotaInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ApplyReason = &v
	}
	return nil
}

func (p *PartitionQuotaInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.OrgName = &v
	}
	return nil
}

func (p *PartitionQuotaInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionQuotaInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionQuotaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orgId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:orgId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrgId)); err != nil {
		return fmt.Errorf("%T.orgId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:orgId: %s", p, err)
	}
	return err
}

func (p *PartitionQuotaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalQuota", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:totalQuota: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TotalQuota)); err != nil {
		return fmt.Errorf("%T.totalQuota (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:totalQuota: %s", p, err)
	}
	return err
}

func (p *PartitionQuotaInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsedOuota() {
		if err := oprot.WriteFieldBegin("usedOuota", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:usedOuota: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.UsedOuota)); err != nil {
			return fmt.Errorf("%T.usedOuota (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:usedOuota: %s", p, err)
		}
	}
	return err
}

func (p *PartitionQuotaInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplyReason() {
		if err := oprot.WriteFieldBegin("applyReason", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:applyReason: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.ApplyReason)); err != nil {
			return fmt.Errorf("%T.applyReason (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:applyReason: %s", p, err)
		}
	}
	return err
}

func (p *PartitionQuotaInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgName() {
		if err := oprot.WriteFieldBegin("orgName", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:orgName: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.OrgName)); err != nil {
			return fmt.Errorf("%T.orgName (5) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:orgName: %s", p, err)
		}
	}
	return err
}

func (p *PartitionQuotaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionQuotaInfo(%+v)", *p)
}

type ApplyQuotaRequest struct {
	QuotaInfo *PartitionQuotaInfo `thrift:"quotaInfo,1,required" json:"quotaInfo"`
}

func NewApplyQuotaRequest() *ApplyQuotaRequest {
	return &ApplyQuotaRequest{}
}

var ApplyQuotaRequest_QuotaInfo_DEFAULT *PartitionQuotaInfo

func (p *ApplyQuotaRequest) GetQuotaInfo() *PartitionQuotaInfo {
	if !p.IsSetQuotaInfo() {
		return ApplyQuotaRequest_QuotaInfo_DEFAULT
	}
	return p.QuotaInfo
}
func (p *ApplyQuotaRequest) IsSetQuotaInfo() bool {
	return p.QuotaInfo != nil
}

func (p *ApplyQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApplyQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.QuotaInfo = &PartitionQuotaInfo{}
	if err := p.QuotaInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QuotaInfo, err)
	}
	return nil
}

func (p *ApplyQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApplyQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApplyQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quotaInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quotaInfo: %s", p, err)
	}
	if err := p.QuotaInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QuotaInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quotaInfo: %s", p, err)
	}
	return err
}

func (p *ApplyQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApplyQuotaRequest(%+v)", *p)
}

type AutoApplyQuotaRequest struct {
	QuotaInfo *PartitionQuotaInfo `thrift:"quotaInfo,1,required" json:"quotaInfo"`
}

func NewAutoApplyQuotaRequest() *AutoApplyQuotaRequest {
	return &AutoApplyQuotaRequest{}
}

var AutoApplyQuotaRequest_QuotaInfo_DEFAULT *PartitionQuotaInfo

func (p *AutoApplyQuotaRequest) GetQuotaInfo() *PartitionQuotaInfo {
	if !p.IsSetQuotaInfo() {
		return AutoApplyQuotaRequest_QuotaInfo_DEFAULT
	}
	return p.QuotaInfo
}
func (p *AutoApplyQuotaRequest) IsSetQuotaInfo() bool {
	return p.QuotaInfo != nil
}

func (p *AutoApplyQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AutoApplyQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.QuotaInfo = &PartitionQuotaInfo{}
	if err := p.QuotaInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QuotaInfo, err)
	}
	return nil
}

func (p *AutoApplyQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AutoApplyQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AutoApplyQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quotaInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quotaInfo: %s", p, err)
	}
	if err := p.QuotaInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QuotaInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quotaInfo: %s", p, err)
	}
	return err
}

func (p *AutoApplyQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoApplyQuotaRequest(%+v)", *p)
}

type ListQuotaResponse struct {
	QuotaList          []*PartitionQuotaInfo `thrift:"quotaList,1,required" json:"quotaList"`
	ApprovedTotalQuota int32                 `thrift:"approvedTotalQuota,2,required" json:"approvedTotalQuota"`
}

func NewListQuotaResponse() *ListQuotaResponse {
	return &ListQuotaResponse{}
}

func (p *ListQuotaResponse) GetQuotaList() []*PartitionQuotaInfo {
	return p.QuotaList
}

func (p *ListQuotaResponse) GetApprovedTotalQuota() int32 {
	return p.ApprovedTotalQuota
}
func (p *ListQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PartitionQuotaInfo, 0, size)
	p.QuotaList = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &PartitionQuotaInfo{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.QuotaList = append(p.QuotaList, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ApprovedTotalQuota = v
	}
	return nil
}

func (p *ListQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quotaList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quotaList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.QuotaList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.QuotaList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quotaList: %s", p, err)
	}
	return err
}

func (p *ListQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approvedTotalQuota", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:approvedTotalQuota: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ApprovedTotalQuota)); err != nil {
		return fmt.Errorf("%T.approvedTotalQuota (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:approvedTotalQuota: %s", p, err)
	}
	return err
}

func (p *ListQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListQuotaResponse(%+v)", *p)
}

type ListPendingQuotaResponse struct {
	PendingQuotaList []*PartitionQuotaInfo `thrift:"pendingQuotaList,1,required" json:"pendingQuotaList"`
	TalosAdmin       bool                  `thrift:"talosAdmin,2,required" json:"talosAdmin"`
}

func NewListPendingQuotaResponse() *ListPendingQuotaResponse {
	return &ListPendingQuotaResponse{}
}

func (p *ListPendingQuotaResponse) GetPendingQuotaList() []*PartitionQuotaInfo {
	return p.PendingQuotaList
}

func (p *ListPendingQuotaResponse) GetTalosAdmin() bool {
	return p.TalosAdmin
}
func (p *ListPendingQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPendingQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PartitionQuotaInfo, 0, size)
	p.PendingQuotaList = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &PartitionQuotaInfo{}
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3, err)
		}
		p.PendingQuotaList = append(p.PendingQuotaList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListPendingQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TalosAdmin = v
	}
	return nil
}

func (p *ListPendingQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListPendingQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPendingQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pendingQuotaList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pendingQuotaList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PendingQuotaList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PendingQuotaList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pendingQuotaList: %s", p, err)
	}
	return err
}

func (p *ListPendingQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("talosAdmin", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:talosAdmin: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.TalosAdmin)); err != nil {
		return fmt.Errorf("%T.talosAdmin (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:talosAdmin: %s", p, err)
	}
	return err
}

func (p *ListPendingQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPendingQuotaResponse(%+v)", *p)
}

type ApproveQuotaRequest struct {
	QuotaInfo *PartitionQuotaInfo `thrift:"quotaInfo,1,required" json:"quotaInfo"`
}

func NewApproveQuotaRequest() *ApproveQuotaRequest {
	return &ApproveQuotaRequest{}
}

var ApproveQuotaRequest_QuotaInfo_DEFAULT *PartitionQuotaInfo

func (p *ApproveQuotaRequest) GetQuotaInfo() *PartitionQuotaInfo {
	if !p.IsSetQuotaInfo() {
		return ApproveQuotaRequest_QuotaInfo_DEFAULT
	}
	return p.QuotaInfo
}
func (p *ApproveQuotaRequest) IsSetQuotaInfo() bool {
	return p.QuotaInfo != nil
}

func (p *ApproveQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApproveQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.QuotaInfo = &PartitionQuotaInfo{}
	if err := p.QuotaInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QuotaInfo, err)
	}
	return nil
}

func (p *ApproveQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApproveQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApproveQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quotaInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quotaInfo: %s", p, err)
	}
	if err := p.QuotaInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QuotaInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quotaInfo: %s", p, err)
	}
	return err
}

func (p *ApproveQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApproveQuotaRequest(%+v)", *p)
}

type ApproveQuotaResponse struct {
	PendingQuotaList []*PartitionQuotaInfo `thrift:"pendingQuotaList,1,required" json:"pendingQuotaList"`
	TalosAdmin       bool                  `thrift:"talosAdmin,2,required" json:"talosAdmin"`
}

func NewApproveQuotaResponse() *ApproveQuotaResponse {
	return &ApproveQuotaResponse{}
}

func (p *ApproveQuotaResponse) GetPendingQuotaList() []*PartitionQuotaInfo {
	return p.PendingQuotaList
}

func (p *ApproveQuotaResponse) GetTalosAdmin() bool {
	return p.TalosAdmin
}
func (p *ApproveQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ApproveQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PartitionQuotaInfo, 0, size)
	p.PendingQuotaList = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &PartitionQuotaInfo{}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.PendingQuotaList = append(p.PendingQuotaList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ApproveQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TalosAdmin = v
	}
	return nil
}

func (p *ApproveQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApproveQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ApproveQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pendingQuotaList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pendingQuotaList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PendingQuotaList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PendingQuotaList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pendingQuotaList: %s", p, err)
	}
	return err
}

func (p *ApproveQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("talosAdmin", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:talosAdmin: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.TalosAdmin)); err != nil {
		return fmt.Errorf("%T.talosAdmin (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:talosAdmin: %s", p, err)
	}
	return err
}

func (p *ApproveQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApproveQuotaResponse(%+v)", *p)
}

type RevokeQuotaRequest struct {
	QuotaInfo *PartitionQuotaInfo `thrift:"quotaInfo,1,required" json:"quotaInfo"`
}

func NewRevokeQuotaRequest() *RevokeQuotaRequest {
	return &RevokeQuotaRequest{}
}

var RevokeQuotaRequest_QuotaInfo_DEFAULT *PartitionQuotaInfo

func (p *RevokeQuotaRequest) GetQuotaInfo() *PartitionQuotaInfo {
	if !p.IsSetQuotaInfo() {
		return RevokeQuotaRequest_QuotaInfo_DEFAULT
	}
	return p.QuotaInfo
}
func (p *RevokeQuotaRequest) IsSetQuotaInfo() bool {
	return p.QuotaInfo != nil
}

func (p *RevokeQuotaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	p.QuotaInfo = &PartitionQuotaInfo{}
	if err := p.QuotaInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.QuotaInfo, err)
	}
	return nil
}

func (p *RevokeQuotaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RevokeQuotaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("quotaInfo", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:quotaInfo: %s", p, err)
	}
	if err := p.QuotaInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.QuotaInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:quotaInfo: %s", p, err)
	}
	return err
}

func (p *RevokeQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeQuotaRequest(%+v)", *p)
}

type RevokeQuotaResponse struct {
	PendingQuotaList []*PartitionQuotaInfo `thrift:"pendingQuotaList,1,required" json:"pendingQuotaList"`
	TalosAdmin       bool                  `thrift:"talosAdmin,2,required" json:"talosAdmin"`
}

func NewRevokeQuotaResponse() *RevokeQuotaResponse {
	return &RevokeQuotaResponse{}
}

func (p *RevokeQuotaResponse) GetPendingQuotaList() []*PartitionQuotaInfo {
	return p.PendingQuotaList
}

func (p *RevokeQuotaResponse) GetTalosAdmin() bool {
	return p.TalosAdmin
}
func (p *RevokeQuotaResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PartitionQuotaInfo, 0, size)
	p.PendingQuotaList = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &PartitionQuotaInfo{}
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5, err)
		}
		p.PendingQuotaList = append(p.PendingQuotaList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RevokeQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TalosAdmin = v
	}
	return nil
}

func (p *RevokeQuotaResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RevokeQuotaResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pendingQuotaList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pendingQuotaList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PendingQuotaList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PendingQuotaList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pendingQuotaList: %s", p, err)
	}
	return err
}

func (p *RevokeQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("talosAdmin", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:talosAdmin: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.TalosAdmin)); err != nil {
		return fmt.Errorf("%T.talosAdmin (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:talosAdmin: %s", p, err)
	}
	return err
}

func (p *RevokeQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeQuotaResponse(%+v)", *p)
}
