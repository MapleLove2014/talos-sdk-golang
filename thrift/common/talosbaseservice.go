// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import (
	"bytes"
	"fmt"

	"github.com/MapleLove2014/talos-sdk-golang/thrift/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type TalosBaseService interface {
	// Get Talas service version;
	//
	GetServiceVersion() (r *Version, err error)
	// Check the version compatibility between client and server;
	//
	//
	// Parameters:
	//  - ClientVersion
	ValidClientVersion(clientVersion *Version) (err error)
}

type TalosBaseServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewTalosBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalosBaseServiceClient {
	return &TalosBaseServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewTalosBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalosBaseServiceClient {
	return &TalosBaseServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Get Talas service version;
//
func (p *TalosBaseServiceClient) GetServiceVersion() (r *Version, err error) {
	if err = p.sendGetServiceVersion(); err != nil {
		return
	}
	return p.recvGetServiceVersion()
}

func (p *TalosBaseServiceClient) sendGetServiceVersion() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getServiceVersion", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetServiceVersionArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalosBaseServiceClient) recvGetServiceVersion() (value *Version, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getServiceVersion failed: out of sequence response")
		return
	}
	result := GetServiceVersionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Check the version compatibility between client and server;
//
//
// Parameters:
//  - ClientVersion
func (p *TalosBaseServiceClient) ValidClientVersion(clientVersion *Version) (err error) {
	if err = p.sendValidClientVersion(clientVersion); err != nil {
		return
	}
	return p.recvValidClientVersion()
}

func (p *TalosBaseServiceClient) sendValidClientVersion(clientVersion *Version) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("validClientVersion", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ValidClientVersionArgs{
		ClientVersion: clientVersion,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TalosBaseServiceClient) recvValidClientVersion() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "validClientVersion failed: out of sequence response")
		return
	}
	result := ValidClientVersionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type TalosBaseServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TalosBaseService
}

func (p *TalosBaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TalosBaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TalosBaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTalosBaseServiceProcessor(handler TalosBaseService) *TalosBaseServiceProcessor {

	self4 := &TalosBaseServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["getServiceVersion"] = &talosBaseServiceProcessorGetServiceVersion{handler: handler}
	self4.processorMap["validClientVersion"] = &talosBaseServiceProcessorValidClientVersion{handler: handler}
	return self4
}

func (p *TalosBaseServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x5

}

type talosBaseServiceProcessorGetServiceVersion struct {
	handler TalosBaseService
}

func (p *talosBaseServiceProcessorGetServiceVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetServiceVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getServiceVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetServiceVersionResult{}
	var retval *Version
	var err2 error
	if retval, err2 = p.handler.GetServiceVersion(); err2 != nil {
		switch v := err2.(type) {
		case *GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServiceVersion: "+err2.Error())
			oprot.WriteMessageBegin("getServiceVersion", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getServiceVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type talosBaseServiceProcessorValidClientVersion struct {
	handler TalosBaseService
}

func (p *talosBaseServiceProcessorValidClientVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ValidClientVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("validClientVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ValidClientVersionResult{}
	var err2 error
	if err2 = p.handler.ValidClientVersion(args.ClientVersion); err2 != nil {
		switch v := err2.(type) {
		case *GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing validClientVersion: "+err2.Error())
			oprot.WriteMessageBegin("validClientVersion", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("validClientVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetServiceVersionArgs struct {
}

func NewGetServiceVersionArgs() *GetServiceVersionArgs {
	return &GetServiceVersionArgs{}
}

func (p *GetServiceVersionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetServiceVersionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServiceVersion_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetServiceVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServiceVersionArgs(%+v)", *p)
}

type GetServiceVersionResult struct {
	Success *Version              `thrift:"success,0" json:"success"`
	E       *GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetServiceVersionResult() *GetServiceVersionResult {
	return &GetServiceVersionResult{}
}

var GetServiceVersionResult_Success_DEFAULT *Version

func (p *GetServiceVersionResult) GetSuccess() *Version {
	if !p.IsSetSuccess() {
		return GetServiceVersionResult_Success_DEFAULT
	}
	return p.Success
}

var GetServiceVersionResult_E_DEFAULT *GalaxyTalosException

func (p *GetServiceVersionResult) GetE() *GalaxyTalosException {
	if !p.IsSetE() {
		return GetServiceVersionResult_E_DEFAULT
	}
	return p.E
}
func (p *GetServiceVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetServiceVersionResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetServiceVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetServiceVersionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Version{
		Major: 1,

		Date: "19700101",
	}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetServiceVersionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetServiceVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getServiceVersion_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetServiceVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetServiceVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetServiceVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServiceVersionResult(%+v)", *p)
}

type ValidClientVersionArgs struct {
	ClientVersion *Version `thrift:"clientVersion,1" json:"clientVersion"`
}

func NewValidClientVersionArgs() *ValidClientVersionArgs {
	return &ValidClientVersionArgs{}
}

var ValidClientVersionArgs_ClientVersion_DEFAULT *Version

func (p *ValidClientVersionArgs) GetClientVersion() *Version {
	if !p.IsSetClientVersion() {
		return ValidClientVersionArgs_ClientVersion_DEFAULT
	}
	return p.ClientVersion
}
func (p *ValidClientVersionArgs) IsSetClientVersion() bool {
	return p.ClientVersion != nil
}

func (p *ValidClientVersionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ValidClientVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.ClientVersion = &Version{
		Major: 1,

		Date: "19700101",
	}
	if err := p.ClientVersion.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ClientVersion, err)
	}
	return nil
}

func (p *ValidClientVersionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("validClientVersion_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ValidClientVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientVersion", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientVersion: %s", p, err)
	}
	if err := p.ClientVersion.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ClientVersion, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:clientVersion: %s", p, err)
	}
	return err
}

func (p *ValidClientVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidClientVersionArgs(%+v)", *p)
}

type ValidClientVersionResult struct {
	E *GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewValidClientVersionResult() *ValidClientVersionResult {
	return &ValidClientVersionResult{}
}

var ValidClientVersionResult_E_DEFAULT *GalaxyTalosException

func (p *ValidClientVersionResult) GetE() *GalaxyTalosException {
	if !p.IsSetE() {
		return ValidClientVersionResult_E_DEFAULT
	}
	return p.E
}
func (p *ValidClientVersionResult) IsSetE() bool {
	return p.E != nil
}

func (p *ValidClientVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ValidClientVersionResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ValidClientVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("validClientVersion_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ValidClientVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ValidClientVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidClientVersionResult(%+v)", *p)
}
