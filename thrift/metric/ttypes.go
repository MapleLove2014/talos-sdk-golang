// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metric

import (
	"bytes"
	"fmt"

	"github.com/XiaoMi/talos-sdk-golang/thrift/common"
	"github.com/XiaoMi/talos-sdk-golang/thrift/thrift"
	"github.com/XiaoMi/talos-sdk-golang/thrift/topic"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = topic.GoUnusedProtection__
var GoUnusedProtection__ int

type PartitionConsumeUnit struct {
	PartitionId          int32  `thrift:"partitionId,1,required" json:"partitionId"`
	IpAddr               string `thrift:"ipAddr,2,required" json:"ipAddr"`
	ConsumerCommitOffset int64  `thrift:"consumerCommitOffset,3,required" json:"consumerCommitOffset"`
	ConsumerOffsetLag    int64  `thrift:"consumerOffsetLag,4,required" json:"consumerOffsetLag"`
}

func NewPartitionConsumeUnit() *PartitionConsumeUnit {
	return &PartitionConsumeUnit{}
}

func (p *PartitionConsumeUnit) GetPartitionId() int32 {
	return p.PartitionId
}

func (p *PartitionConsumeUnit) GetIpAddr() string {
	return p.IpAddr
}

func (p *PartitionConsumeUnit) GetConsumerCommitOffset() int64 {
	return p.ConsumerCommitOffset
}

func (p *PartitionConsumeUnit) GetConsumerOffsetLag() int64 {
	return p.ConsumerOffsetLag
}
func (p *PartitionConsumeUnit) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionConsumeUnit) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartitionId = v
	}
	return nil
}

func (p *PartitionConsumeUnit) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IpAddr = v
	}
	return nil
}

func (p *PartitionConsumeUnit) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ConsumerCommitOffset = v
	}
	return nil
}

func (p *PartitionConsumeUnit) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.ConsumerOffsetLag = v
	}
	return nil
}

func (p *PartitionConsumeUnit) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PartitionConsumeUnit"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionConsumeUnit) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PartitionId)); err != nil {
		return fmt.Errorf("%T.partitionId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionId: %s", p, err)
	}
	return err
}

func (p *PartitionConsumeUnit) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipAddr", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:ipAddr: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IpAddr)); err != nil {
		return fmt.Errorf("%T.ipAddr (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:ipAddr: %s", p, err)
	}
	return err
}

func (p *PartitionConsumeUnit) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerCommitOffset", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:consumerCommitOffset: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ConsumerCommitOffset)); err != nil {
		return fmt.Errorf("%T.consumerCommitOffset (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:consumerCommitOffset: %s", p, err)
	}
	return err
}

func (p *PartitionConsumeUnit) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerOffsetLag", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:consumerOffsetLag: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ConsumerOffsetLag)); err != nil {
		return fmt.Errorf("%T.consumerOffsetLag (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:consumerOffsetLag: %s", p, err)
	}
	return err
}

func (p *PartitionConsumeUnit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionConsumeUnit(%+v)", *p)
}

type ConsumerGroupAndTopic struct {
	ConsumerGroupName      string                        `thrift:"consumerGroupName,1,required" json:"consumerGroupName"`
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,2,required" json:"topicTalosResourceName"`
}

func NewConsumerGroupAndTopic() *ConsumerGroupAndTopic {
	return &ConsumerGroupAndTopic{}
}

func (p *ConsumerGroupAndTopic) GetConsumerGroupName() string {
	return p.ConsumerGroupName
}

var ConsumerGroupAndTopic_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *ConsumerGroupAndTopic) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return ConsumerGroupAndTopic_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *ConsumerGroupAndTopic) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *ConsumerGroupAndTopic) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConsumerGroupAndTopic) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ConsumerGroupName = v
	}
	return nil
}

func (p *ConsumerGroupAndTopic) ReadField2(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *ConsumerGroupAndTopic) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConsumerGroupAndTopic"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConsumerGroupAndTopic) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ConsumerGroupName)); err != nil {
		return fmt.Errorf("%T.consumerGroupName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroupName: %s", p, err)
	}
	return err
}

func (p *ConsumerGroupAndTopic) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *ConsumerGroupAndTopic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConsumerGroupAndTopic(%+v)", *p)
}

type QueryConsumerGroupRequest struct {
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
}

func NewQueryConsumerGroupRequest() *QueryConsumerGroupRequest {
	return &QueryConsumerGroupRequest{}
}

var QueryConsumerGroupRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *QueryConsumerGroupRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return QueryConsumerGroupRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *QueryConsumerGroupRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *QueryConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryConsumerGroupRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *QueryConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryConsumerGroupRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *QueryConsumerGroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryConsumerGroupRequest(%+v)", *p)
}

type QueryConsumerGroupResponse struct {
	ConsumerGroupList map[string]bool `thrift:"consumerGroupList,1,required" json:"consumerGroupList"`
}

func NewQueryConsumerGroupResponse() *QueryConsumerGroupResponse {
	return &QueryConsumerGroupResponse{}
}

func (p *QueryConsumerGroupResponse) GetConsumerGroupList() map[string]bool {
	return p.ConsumerGroupList
}
func (p *QueryConsumerGroupResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryConsumerGroupResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set begin: %s", err)
	}
	tSet := make(map[string]bool, size)
	p.ConsumerGroupList = tSet
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem0 = v
		}
		p.ConsumerGroupList[_elem0] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s", err)
	}
	return nil
}

func (p *QueryConsumerGroupResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryConsumerGroupResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryConsumerGroupResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroupList", thrift.SET, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroupList: %s", p, err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.ConsumerGroupList)); err != nil {
		return fmt.Errorf("error writing set begin: %s", err)
	}
	for v, _ := range p.ConsumerGroupList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return fmt.Errorf("error writing set end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroupList: %s", p, err)
	}
	return err
}

func (p *QueryConsumerGroupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryConsumerGroupResponse(%+v)", *p)
}

type GetTopicConsumeUnitRequest struct {
	ConsumerGroupAndTopic *ConsumerGroupAndTopic `thrift:"consumerGroupAndTopic,1,required" json:"consumerGroupAndTopic"`
}

func NewGetTopicConsumeUnitRequest() *GetTopicConsumeUnitRequest {
	return &GetTopicConsumeUnitRequest{}
}

var GetTopicConsumeUnitRequest_ConsumerGroupAndTopic_DEFAULT *ConsumerGroupAndTopic

func (p *GetTopicConsumeUnitRequest) GetConsumerGroupAndTopic() *ConsumerGroupAndTopic {
	if !p.IsSetConsumerGroupAndTopic() {
		return GetTopicConsumeUnitRequest_ConsumerGroupAndTopic_DEFAULT
	}
	return p.ConsumerGroupAndTopic
}
func (p *GetTopicConsumeUnitRequest) IsSetConsumerGroupAndTopic() bool {
	return p.ConsumerGroupAndTopic != nil
}

func (p *GetTopicConsumeUnitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitRequest) ReadField1(iprot thrift.TProtocol) error {
	p.ConsumerGroupAndTopic = &ConsumerGroupAndTopic{}
	if err := p.ConsumerGroupAndTopic.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ConsumerGroupAndTopic, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTopicConsumeUnitRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicConsumeUnitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumerGroupAndTopic", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:consumerGroupAndTopic: %s", p, err)
	}
	if err := p.ConsumerGroupAndTopic.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ConsumerGroupAndTopic, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:consumerGroupAndTopic: %s", p, err)
	}
	return err
}

func (p *GetTopicConsumeUnitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicConsumeUnitRequest(%+v)", *p)
}

type GetTopicConsumeUnitResponse struct {
	PartitionConsumeUnitList []*PartitionConsumeUnit `thrift:"partitionConsumeUnitList,1,required" json:"partitionConsumeUnitList"`
}

func NewGetTopicConsumeUnitResponse() *GetTopicConsumeUnitResponse {
	return &GetTopicConsumeUnitResponse{}
}

func (p *GetTopicConsumeUnitResponse) GetPartitionConsumeUnitList() []*PartitionConsumeUnit {
	return p.PartitionConsumeUnitList
}
func (p *GetTopicConsumeUnitResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PartitionConsumeUnit, 0, size)
	p.PartitionConsumeUnitList = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &PartitionConsumeUnit{}
		if err := _elem1.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem1, err)
		}
		p.PartitionConsumeUnitList = append(p.PartitionConsumeUnitList, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTopicConsumeUnitResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicConsumeUnitResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionConsumeUnitList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:partitionConsumeUnitList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionConsumeUnitList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartitionConsumeUnitList {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:partitionConsumeUnitList: %s", p, err)
	}
	return err
}

func (p *GetTopicConsumeUnitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicConsumeUnitResponse(%+v)", *p)
}

type QueryTopicConsumeUnitRequest struct {
	TopicTalosResourceName *topic.TopicTalosResourceName `thrift:"topicTalosResourceName,1,required" json:"topicTalosResourceName"`
}

func NewQueryTopicConsumeUnitRequest() *QueryTopicConsumeUnitRequest {
	return &QueryTopicConsumeUnitRequest{}
}

var QueryTopicConsumeUnitRequest_TopicTalosResourceName_DEFAULT *topic.TopicTalosResourceName

func (p *QueryTopicConsumeUnitRequest) GetTopicTalosResourceName() *topic.TopicTalosResourceName {
	if !p.IsSetTopicTalosResourceName() {
		return QueryTopicConsumeUnitRequest_TopicTalosResourceName_DEFAULT
	}
	return p.TopicTalosResourceName
}
func (p *QueryTopicConsumeUnitRequest) IsSetTopicTalosResourceName() bool {
	return p.TopicTalosResourceName != nil
}

func (p *QueryTopicConsumeUnitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicTalosResourceName = &topic.TopicTalosResourceName{}
	if err := p.TopicTalosResourceName.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicTalosResourceName, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopicConsumeUnitRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicTalosResourceName", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicTalosResourceName: %s", p, err)
	}
	if err := p.TopicTalosResourceName.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicTalosResourceName, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicTalosResourceName: %s", p, err)
	}
	return err
}

func (p *QueryTopicConsumeUnitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicConsumeUnitRequest(%+v)", *p)
}

type QueryTopicConsumeUnitResponse struct {
	TopicConsumeUnitMap map[string][]*PartitionConsumeUnit `thrift:"topicConsumeUnitMap,1,required" json:"topicConsumeUnitMap"`
}

func NewQueryTopicConsumeUnitResponse() *QueryTopicConsumeUnitResponse {
	return &QueryTopicConsumeUnitResponse{}
}

func (p *QueryTopicConsumeUnitResponse) GetTopicConsumeUnitMap() map[string][]*PartitionConsumeUnit {
	return p.TopicConsumeUnitMap
}
func (p *QueryTopicConsumeUnitResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PartitionConsumeUnit, size)
	p.TopicConsumeUnitMap = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PartitionConsumeUnit, 0, size)
		_val3 := tSlice
		for i := 0; i < size; i++ {
			_elem4 := &PartitionConsumeUnit{}
			if err := _elem4.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem4, err)
			}
			_val3 = append(_val3, _elem4)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.TopicConsumeUnitMap[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTopicConsumeUnitResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryTopicConsumeUnitResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicConsumeUnitMap", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicConsumeUnitMap: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TopicConsumeUnitMap)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.TopicConsumeUnitMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicConsumeUnitMap: %s", p, err)
	}
	return err
}

func (p *QueryTopicConsumeUnitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTopicConsumeUnitResponse(%+v)", *p)
}

type GetDataPreviewRequest struct {
	TopicAndPartition *topic.TopicAndPartition `thrift:"topicAndPartition,1,required" json:"topicAndPartition"`
	TimeoutTimestamp  *int64                   `thrift:"timeoutTimestamp,2" json:"timeoutTimestamp"`
}

func NewGetDataPreviewRequest() *GetDataPreviewRequest {
	return &GetDataPreviewRequest{}
}

var GetDataPreviewRequest_TopicAndPartition_DEFAULT *topic.TopicAndPartition

func (p *GetDataPreviewRequest) GetTopicAndPartition() *topic.TopicAndPartition {
	if !p.IsSetTopicAndPartition() {
		return GetDataPreviewRequest_TopicAndPartition_DEFAULT
	}
	return p.TopicAndPartition
}

var GetDataPreviewRequest_TimeoutTimestamp_DEFAULT int64

func (p *GetDataPreviewRequest) GetTimeoutTimestamp() int64 {
	if !p.IsSetTimeoutTimestamp() {
		return GetDataPreviewRequest_TimeoutTimestamp_DEFAULT
	}
	return *p.TimeoutTimestamp
}
func (p *GetDataPreviewRequest) IsSetTopicAndPartition() bool {
	return p.TopicAndPartition != nil
}

func (p *GetDataPreviewRequest) IsSetTimeoutTimestamp() bool {
	return p.TimeoutTimestamp != nil
}

func (p *GetDataPreviewRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDataPreviewRequest) ReadField1(iprot thrift.TProtocol) error {
	p.TopicAndPartition = &topic.TopicAndPartition{}
	if err := p.TopicAndPartition.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TopicAndPartition, err)
	}
	return nil
}

func (p *GetDataPreviewRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TimeoutTimestamp = &v
	}
	return nil
}

func (p *GetDataPreviewRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDataPreviewRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDataPreviewRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topicAndPartition", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topicAndPartition: %s", p, err)
	}
	if err := p.TopicAndPartition.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TopicAndPartition, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topicAndPartition: %s", p, err)
	}
	return err
}

func (p *GetDataPreviewRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutTimestamp() {
		if err := oprot.WriteFieldBegin("timeoutTimestamp", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:timeoutTimestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.TimeoutTimestamp)); err != nil {
			return fmt.Errorf("%T.timeoutTimestamp (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:timeoutTimestamp: %s", p, err)
		}
	}
	return err
}

func (p *GetDataPreviewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDataPreviewRequest(%+v)", *p)
}

type GetDataPreviewResponse struct {
	SchemaTitleList []string            `thrift:"schemaTitleList,1,required" json:"schemaTitleList"`
	MessageLists    []map[string]string `thrift:"messageLists,2,required" json:"messageLists"`
	MessageNumber   int32               `thrift:"messageNumber,3,required" json:"messageNumber"`
	IsTransfer      *bool               `thrift:"isTransfer,4" json:"isTransfer"`
}

func NewGetDataPreviewResponse() *GetDataPreviewResponse {
	return &GetDataPreviewResponse{}
}

func (p *GetDataPreviewResponse) GetSchemaTitleList() []string {
	return p.SchemaTitleList
}

func (p *GetDataPreviewResponse) GetMessageLists() []map[string]string {
	return p.MessageLists
}

func (p *GetDataPreviewResponse) GetMessageNumber() int32 {
	return p.MessageNumber
}

var GetDataPreviewResponse_IsTransfer_DEFAULT bool

func (p *GetDataPreviewResponse) GetIsTransfer() bool {
	if !p.IsSetIsTransfer() {
		return GetDataPreviewResponse_IsTransfer_DEFAULT
	}
	return *p.IsTransfer
}
func (p *GetDataPreviewResponse) IsSetIsTransfer() bool {
	return p.IsTransfer != nil
}

func (p *GetDataPreviewResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDataPreviewResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.SchemaTitleList = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.SchemaTitleList = append(p.SchemaTitleList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetDataPreviewResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.MessageLists = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s", err)
		}
		tMap := make(map[string]string, size)
		_elem6 := tMap
		for i := 0; i < size; i++ {
			var _key7 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_key7 = v
			}
			var _val8 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s", err)
			} else {
				_val8 = v
			}
			_elem6[_key7] = _val8
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s", err)
		}
		p.MessageLists = append(p.MessageLists, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetDataPreviewResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MessageNumber = v
	}
	return nil
}

func (p *GetDataPreviewResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.IsTransfer = &v
	}
	return nil
}

func (p *GetDataPreviewResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetDataPreviewResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDataPreviewResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("schemaTitleList", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:schemaTitleList: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SchemaTitleList)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SchemaTitleList {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:schemaTitleList: %s", p, err)
	}
	return err
}

func (p *GetDataPreviewResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageLists", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:messageLists: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.MessageLists)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.MessageLists {
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:messageLists: %s", p, err)
	}
	return err
}

func (p *GetDataPreviewResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageNumber", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:messageNumber: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MessageNumber)); err != nil {
		return fmt.Errorf("%T.messageNumber (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:messageNumber: %s", p, err)
	}
	return err
}

func (p *GetDataPreviewResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsTransfer() {
		if err := oprot.WriteFieldBegin("isTransfer", thrift.BOOL, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:isTransfer: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.IsTransfer)); err != nil {
			return fmt.Errorf("%T.isTransfer (4) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:isTransfer: %s", p, err)
		}
	}
	return err
}

func (p *GetDataPreviewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDataPreviewResponse(%+v)", *p)
}
