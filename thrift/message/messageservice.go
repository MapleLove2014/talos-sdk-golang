// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package message

import (
	"bytes"
	"fmt"

	"github.com/MapleLove2014/talos-sdk-golang/thrift/common"
	"github.com/MapleLove2014/talos-sdk-golang/thrift/thrift"
	"github.com/MapleLove2014/talos-sdk-golang/thrift/topic"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = topic.GoUnusedProtection__

type MessageService interface {
	common.TalosBaseService

	// Put message to talos;
	//
	//
	// Parameters:
	//  - Request
	PutMessage(request *PutMessageRequest) (r *PutMessageResponse, err error)
	// Get message from talos;
	//
	//
	// Parameters:
	//  - Request
	GetMessage(request *GetMessageRequest) (r *GetMessageResponse, err error)
	// getTopicOffset for all partitions of specified topic, which will return all
	// current available message offset range.
	//
	//
	// Parameters:
	//  - Request
	GetTopicOffset(request *GetTopicOffsetRequest) (r *GetTopicOffsetResponse, err error)
	// getPartitionOffset for specified topicAndPartition
	//
	//
	// Parameters:
	//  - Request
	GetPartitionOffset(request *GetPartitionOffsetRequest) (r *GetPartitionOffsetResponse, err error)
	// getPartitionsOffset list for specified partitions in the same restServer
	//
	//
	// Parameters:
	//  - Request
	GetPartitionsOffset(request *GetPartitionsOffsetRequest) (r *GetPartitionsOffsetResponse, err error)
	// getScheduleInfo return all partitions and server which serving it of specified topic.
	//
	//
	// Parameters:
	//  - Request
	GetScheduleInfo(request *GetScheduleInfoRequest) (r *GetScheduleInfoResponse, err error)
}

type MessageServiceClient struct {
	*common.TalosBaseServiceClient
}

func NewMessageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MessageServiceClient {
	return &MessageServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientFactory(t, f)}
}

func NewMessageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MessageServiceClient {
	return &MessageServiceClient{TalosBaseServiceClient: common.NewTalosBaseServiceClientProtocol(t, iprot, oprot)}
}

// Put message to talos;
//
//
// Parameters:
//  - Request
func (p *MessageServiceClient) PutMessage(request *PutMessageRequest) (r *PutMessageResponse, err error) {
	if err = p.sendPutMessage(request); err != nil {
		return
	}
	return p.recvPutMessage()
}

func (p *MessageServiceClient) sendPutMessage(request *PutMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("putMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PutMessageArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvPutMessage() (value *PutMessageResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putMessage failed: out of sequence response")
		return
	}
	result := PutMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Get message from talos;
//
//
// Parameters:
//  - Request
func (p *MessageServiceClient) GetMessage(request *GetMessageRequest) (r *GetMessageResponse, err error) {
	if err = p.sendGetMessage(request); err != nil {
		return
	}
	return p.recvGetMessage()
}

func (p *MessageServiceClient) sendGetMessage(request *GetMessageRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMessage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetMessageArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvGetMessage() (value *GetMessageResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMessage failed: out of sequence response")
		return
	}
	result := GetMessageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// getTopicOffset for all partitions of specified topic, which will return all
// current available message offset range.
//
//
// Parameters:
//  - Request
func (p *MessageServiceClient) GetTopicOffset(request *GetTopicOffsetRequest) (r *GetTopicOffsetResponse, err error) {
	if err = p.sendGetTopicOffset(request); err != nil {
		return
	}
	return p.recvGetTopicOffset()
}

func (p *MessageServiceClient) sendGetTopicOffset(request *GetTopicOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTopicOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTopicOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvGetTopicOffset() (value *GetTopicOffsetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTopicOffset failed: out of sequence response")
		return
	}
	result := GetTopicOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// getPartitionOffset for specified topicAndPartition
//
//
// Parameters:
//  - Request
func (p *MessageServiceClient) GetPartitionOffset(request *GetPartitionOffsetRequest) (r *GetPartitionOffsetResponse, err error) {
	if err = p.sendGetPartitionOffset(request); err != nil {
		return
	}
	return p.recvGetPartitionOffset()
}

func (p *MessageServiceClient) sendGetPartitionOffset(request *GetPartitionOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPartitionOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvGetPartitionOffset() (value *GetPartitionOffsetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPartitionOffset failed: out of sequence response")
		return
	}
	result := GetPartitionOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// getPartitionsOffset list for specified partitions in the same restServer
//
//
// Parameters:
//  - Request
func (p *MessageServiceClient) GetPartitionsOffset(request *GetPartitionsOffsetRequest) (r *GetPartitionsOffsetResponse, err error) {
	if err = p.sendGetPartitionsOffset(request); err != nil {
		return
	}
	return p.recvGetPartitionsOffset()
}

func (p *MessageServiceClient) sendGetPartitionsOffset(request *GetPartitionsOffsetRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPartitionsOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsOffsetArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvGetPartitionsOffset() (value *GetPartitionsOffsetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPartitionsOffset failed: out of sequence response")
		return
	}
	result := GetPartitionsOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// getScheduleInfo return all partitions and server which serving it of specified topic.
//
//
// Parameters:
//  - Request
func (p *MessageServiceClient) GetScheduleInfo(request *GetScheduleInfoRequest) (r *GetScheduleInfoResponse, err error) {
	if err = p.sendGetScheduleInfo(request); err != nil {
		return
	}
	return p.recvGetScheduleInfo()
}

func (p *MessageServiceClient) sendGetScheduleInfo(request *GetScheduleInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getScheduleInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetScheduleInfoArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvGetScheduleInfo() (value *GetScheduleInfoResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getScheduleInfo failed: out of sequence response")
		return
	}
	result := GetScheduleInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type MessageServiceProcessor struct {
	*common.TalosBaseServiceProcessor
}

func NewMessageServiceProcessor(handler MessageService) *MessageServiceProcessor {
	self20 := &MessageServiceProcessor{common.NewTalosBaseServiceProcessor(handler)}
	self20.AddToProcessorMap("putMessage", &messageServiceProcessorPutMessage{handler: handler})
	self20.AddToProcessorMap("getMessage", &messageServiceProcessorGetMessage{handler: handler})
	self20.AddToProcessorMap("getTopicOffset", &messageServiceProcessorGetTopicOffset{handler: handler})
	self20.AddToProcessorMap("getPartitionOffset", &messageServiceProcessorGetPartitionOffset{handler: handler})
	self20.AddToProcessorMap("getPartitionsOffset", &messageServiceProcessorGetPartitionsOffset{handler: handler})
	self20.AddToProcessorMap("getScheduleInfo", &messageServiceProcessorGetScheduleInfo{handler: handler})
	return self20
}

type messageServiceProcessorPutMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorPutMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PutMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("putMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PutMessageResult{}
	var retval *PutMessageResponse
	var err2 error
	if retval, err2 = p.handler.PutMessage(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putMessage: "+err2.Error())
			oprot.WriteMessageBegin("putMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("putMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorGetMessage struct {
	handler MessageService
}

func (p *messageServiceProcessorGetMessage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetMessageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMessage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetMessageResult{}
	var retval *GetMessageResponse
	var err2 error
	if retval, err2 = p.handler.GetMessage(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessage: "+err2.Error())
			oprot.WriteMessageBegin("getMessage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMessage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorGetTopicOffset struct {
	handler MessageService
}

func (p *messageServiceProcessorGetTopicOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTopicOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTopicOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTopicOffsetResult{}
	var retval *GetTopicOffsetResponse
	var err2 error
	if retval, err2 = p.handler.GetTopicOffset(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTopicOffset: "+err2.Error())
			oprot.WriteMessageBegin("getTopicOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTopicOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorGetPartitionOffset struct {
	handler MessageService
}

func (p *messageServiceProcessorGetPartitionOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPartitionOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionOffsetResult{}
	var retval *GetPartitionOffsetResponse
	var err2 error
	if retval, err2 = p.handler.GetPartitionOffset(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartitionOffset: "+err2.Error())
		oprot.WriteMessageBegin("getPartitionOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPartitionOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorGetPartitionsOffset struct {
	handler MessageService
}

func (p *messageServiceProcessorGetPartitionsOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPartitionsOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsOffsetResult{}
	var retval *GetPartitionsOffsetResponse
	var err2 error
	if retval, err2 = p.handler.GetPartitionsOffset(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartitionsOffset: "+err2.Error())
		oprot.WriteMessageBegin("getPartitionsOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPartitionsOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorGetScheduleInfo struct {
	handler MessageService
}

func (p *messageServiceProcessorGetScheduleInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetScheduleInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getScheduleInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetScheduleInfoResult{}
	var retval *GetScheduleInfoResponse
	var err2 error
	if retval, err2 = p.handler.GetScheduleInfo(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *common.GalaxyTalosException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getScheduleInfo: "+err2.Error())
			oprot.WriteMessageBegin("getScheduleInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getScheduleInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type PutMessageArgs struct {
	Request *PutMessageRequest `thrift:"request,1" json:"request"`
}

func NewPutMessageArgs() *PutMessageArgs {
	return &PutMessageArgs{}
}

var PutMessageArgs_Request_DEFAULT *PutMessageRequest

func (p *PutMessageArgs) GetRequest() *PutMessageRequest {
	if !p.IsSetRequest() {
		return PutMessageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PutMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PutMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PutMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &PutMessageRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *PutMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PutMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *PutMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageArgs(%+v)", *p)
}

type PutMessageResult struct {
	Success *PutMessageResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewPutMessageResult() *PutMessageResult {
	return &PutMessageResult{}
}

var PutMessageResult_Success_DEFAULT *PutMessageResponse

func (p *PutMessageResult) GetSuccess() *PutMessageResponse {
	if !p.IsSetSuccess() {
		return PutMessageResult_Success_DEFAULT
	}
	return p.Success
}

var PutMessageResult_E_DEFAULT *common.GalaxyTalosException

func (p *PutMessageResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return PutMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *PutMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PutMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *PutMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PutMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PutMessageResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *PutMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *PutMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("putMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PutMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PutMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *PutMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PutMessageResult(%+v)", *p)
}

type GetMessageArgs struct {
	Request *GetMessageRequest `thrift:"request,1" json:"request"`
}

func NewGetMessageArgs() *GetMessageArgs {
	return &GetMessageArgs{}
}

var GetMessageArgs_Request_DEFAULT *GetMessageRequest

func (p *GetMessageArgs) GetRequest() *GetMessageRequest {
	if !p.IsSetRequest() {
		return GetMessageArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetMessageArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetMessageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetMessageRequest{
		MaxGetMessageNumber: 2000,

		MaxGetMessageBytes: 10485760,

		ShowUnHandledMessageNumber: true,
	}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetMessageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessage_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageArgs(%+v)", *p)
}

type GetMessageResult struct {
	Success *GetMessageResponse          `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetMessageResult() *GetMessageResult {
	return &GetMessageResult{}
}

var GetMessageResult_Success_DEFAULT *GetMessageResponse

func (p *GetMessageResult) GetSuccess() *GetMessageResponse {
	if !p.IsSetSuccess() {
		return GetMessageResult_Success_DEFAULT
	}
	return p.Success
}

var GetMessageResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetMessageResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetMessageResult_E_DEFAULT
	}
	return p.E
}
func (p *GetMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetMessageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetMessageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetMessageResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetMessageResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetMessageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMessage_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMessageResult(%+v)", *p)
}

type GetTopicOffsetArgs struct {
	Request *GetTopicOffsetRequest `thrift:"request,1" json:"request"`
}

func NewGetTopicOffsetArgs() *GetTopicOffsetArgs {
	return &GetTopicOffsetArgs{}
}

var GetTopicOffsetArgs_Request_DEFAULT *GetTopicOffsetRequest

func (p *GetTopicOffsetArgs) GetRequest() *GetTopicOffsetRequest {
	if !p.IsSetRequest() {
		return GetTopicOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetTopicOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetTopicOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetTopicOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetTopicOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTopicOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetTopicOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicOffsetArgs(%+v)", *p)
}

type GetTopicOffsetResult struct {
	Success *GetTopicOffsetResponse      `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetTopicOffsetResult() *GetTopicOffsetResult {
	return &GetTopicOffsetResult{}
}

var GetTopicOffsetResult_Success_DEFAULT *GetTopicOffsetResponse

func (p *GetTopicOffsetResult) GetSuccess() *GetTopicOffsetResponse {
	if !p.IsSetSuccess() {
		return GetTopicOffsetResult_Success_DEFAULT
	}
	return p.Success
}

var GetTopicOffsetResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetTopicOffsetResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetTopicOffsetResult_E_DEFAULT
	}
	return p.E
}
func (p *GetTopicOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTopicOffsetResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetTopicOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTopicOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetTopicOffsetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTopicOffsetResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetTopicOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTopicOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTopicOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTopicOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetTopicOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTopicOffsetResult(%+v)", *p)
}

type GetPartitionOffsetArgs struct {
	Request *GetPartitionOffsetRequest `thrift:"request,1" json:"request"`
}

func NewGetPartitionOffsetArgs() *GetPartitionOffsetArgs {
	return &GetPartitionOffsetArgs{}
}

var GetPartitionOffsetArgs_Request_DEFAULT *GetPartitionOffsetRequest

func (p *GetPartitionOffsetArgs) GetRequest() *GetPartitionOffsetRequest {
	if !p.IsSetRequest() {
		return GetPartitionOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetPartitionOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetPartitionOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetPartitionOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetPartitionOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPartitionOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetPartitionOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionOffsetArgs(%+v)", *p)
}

type GetPartitionOffsetResult struct {
	Success *GetPartitionOffsetResponse `thrift:"success,0" json:"success"`
}

func NewGetPartitionOffsetResult() *GetPartitionOffsetResult {
	return &GetPartitionOffsetResult{}
}

var GetPartitionOffsetResult_Success_DEFAULT *GetPartitionOffsetResponse

func (p *GetPartitionOffsetResult) GetSuccess() *GetPartitionOffsetResponse {
	if !p.IsSetSuccess() {
		return GetPartitionOffsetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetPartitionOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetPartitionOffsetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPartitionOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionOffsetResult(%+v)", *p)
}

type GetPartitionsOffsetArgs struct {
	Request *GetPartitionsOffsetRequest `thrift:"request,1" json:"request"`
}

func NewGetPartitionsOffsetArgs() *GetPartitionsOffsetArgs {
	return &GetPartitionsOffsetArgs{}
}

var GetPartitionsOffsetArgs_Request_DEFAULT *GetPartitionsOffsetRequest

func (p *GetPartitionsOffsetArgs) GetRequest() *GetPartitionsOffsetRequest {
	if !p.IsSetRequest() {
		return GetPartitionsOffsetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetPartitionsOffsetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetPartitionsOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsOffsetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetPartitionsOffsetRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetPartitionsOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPartitionsOffset_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetPartitionsOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsOffsetArgs(%+v)", *p)
}

type GetPartitionsOffsetResult struct {
	Success *GetPartitionsOffsetResponse `thrift:"success,0" json:"success"`
}

func NewGetPartitionsOffsetResult() *GetPartitionsOffsetResult {
	return &GetPartitionsOffsetResult{}
}

var GetPartitionsOffsetResult_Success_DEFAULT *GetPartitionsOffsetResponse

func (p *GetPartitionsOffsetResult) GetSuccess() *GetPartitionsOffsetResponse {
	if !p.IsSetSuccess() {
		return GetPartitionsOffsetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GetPartitionsOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsOffsetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetPartitionsOffsetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionsOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPartitionsOffset_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsOffsetResult(%+v)", *p)
}

type GetScheduleInfoArgs struct {
	Request *GetScheduleInfoRequest `thrift:"request,1" json:"request"`
}

func NewGetScheduleInfoArgs() *GetScheduleInfoArgs {
	return &GetScheduleInfoArgs{}
}

var GetScheduleInfoArgs_Request_DEFAULT *GetScheduleInfoRequest

func (p *GetScheduleInfoArgs) GetRequest() *GetScheduleInfoRequest {
	if !p.IsSetRequest() {
		return GetScheduleInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *GetScheduleInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *GetScheduleInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetScheduleInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &GetScheduleInfoRequest{}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *GetScheduleInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getScheduleInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetScheduleInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *GetScheduleInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScheduleInfoArgs(%+v)", *p)
}

type GetScheduleInfoResult struct {
	Success *GetScheduleInfoResponse     `thrift:"success,0" json:"success"`
	E       *common.GalaxyTalosException `thrift:"e,1" json:"e"`
}

func NewGetScheduleInfoResult() *GetScheduleInfoResult {
	return &GetScheduleInfoResult{}
}

var GetScheduleInfoResult_Success_DEFAULT *GetScheduleInfoResponse

func (p *GetScheduleInfoResult) GetSuccess() *GetScheduleInfoResponse {
	if !p.IsSetSuccess() {
		return GetScheduleInfoResult_Success_DEFAULT
	}
	return p.Success
}

var GetScheduleInfoResult_E_DEFAULT *common.GalaxyTalosException

func (p *GetScheduleInfoResult) GetE() *common.GalaxyTalosException {
	if !p.IsSetE() {
		return GetScheduleInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *GetScheduleInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetScheduleInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetScheduleInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetScheduleInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetScheduleInfoResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetScheduleInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &common.GalaxyTalosException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetScheduleInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getScheduleInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetScheduleInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetScheduleInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetScheduleInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScheduleInfoResult(%+v)", *p)
}
